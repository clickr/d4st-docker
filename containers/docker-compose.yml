version: "2"

#
# DITA For Small Teams (DFST) Docker compose
# run configuration file. Will run all the 
# containers with appropriate default settings. 
#
# FIXME: Parameterize all appropriate options
#        with variables with defaults (defined
#        in the relevant docker files).
#
# It runs the DITA OT container, the gitlab 
# server (for shared git access and continuous
# integration), and the DFST Link Manager application.
#
# Gitlab is exposed on the default ports 80 and 443
# for HTTP/HTTPS access and 8022 for SSH
#
# The Link Manager is exposed on the default ports
# of 8984 for the Web app and 1984 for the underlying
# BaseX server (used by the git hooks installed in the
# GitLab repositories).
#
# The Web server is exposed on port 8080.
# 
# Placeholder for now, will add appropriate
# variables later (e.g., ports for Web services,
# host-side mount points).

services:

#
# DITA OT
#
# This container provides access to a DITA Open Toolkit
# instace. GitLab uses it to run the OT, BaseX uses
# it for access to DTDs. 
#
  dita-ot:
    extends:
       file: dita-ot/docker-compose.yml  
       service: dita-ot-dfst
    volumes_from:
       - web-delivery
 
#
# DFST Link Manager
#
# The Link Manager provides link-related information
# for use by authors via an interactive Web app
# or other applications via REST API.
#
# It gets files from the git server and depends on
# the DITA Open Toolkit to resolve references to 
# DTDs or other grammar files.
#  
  linkmgr-webapp:
     extends:
       file: link-manager-webapp/docker-compose.yml
       service: linkmgr-basex-webapp
     container_name: linkmgr-webapp
     
  linkmgr:

    extends:
      file: link-manager-basex/docker-compose.yml
      service: linkmgr-basex

    volumes:
       - /Users:/Users
# Uncomment and adjust these lines in order to have the Link Manager
# use a local copy of the Web app source for development purposes:       
       - ${HOME}/workspace-dfst/dfst-linkmgmt-basex/webapp:/webapp
       - ${HOME}/workspace-dfst/dfst-linkmgmt-basex/modules:/repo
  
    volumes_from:
     - dita-ot
 
#
# GitLab
#
# NOTE: Using extends with a separate compose file caused gitlab startup to
#       fail because it didn't have correct permissions on the potsgresql 
#       server to configure the pg_trgm feature. I don't know why.
#
# Copied from https://github.com/sameersbn/docker-gitlab/blob/master/docker-compose.yml
#
# Runs the required postgresql and redis servers:
#
  redis:
    restart: always
    image: sameersbn/redis:latest
    command:
    - --loglevel warning
    volumes:
    - /Users/ekimber/temp/gitlab-sameersbn/data/redis:/var/lib/redis:Z

  postgresql:
    restart: always
    image: sameersbn/postgresql:9.6-2
    volumes:
    - /Users/ekimber/temp/gitlab-sameersbn/data/postgresql:/var/lib/postgresql:Z
    environment:
    - DB_USER=gitlab
    - DB_PASS=password
    - DB_NAME=gitlabhq_production
    - DB_EXTENSION=pg_trgm

  gitlab-dfst:
    restart: always
    # image: sameersbn/gitlab:8.16.6
    image: dfst/gitlab-dfst
    container_name: gitlab-dfst
    depends_on:
      - redis
      - postgresql
       
    volumes:
      - ${HOME}/tmp/gitlab/git-data:/var/opt/gitlab/git-data

    ports:
      - "${GITLAB_PORT}:80"
      - "${GITLAB_SSH_PORT}:22"
    environment:
      - GITLAB_SECRETS_DB_KEY_BASE=S8ZRV6kN43LQ2sQVmVfTlM32jLzj8FFLf6L6WzxtjwqnXkZlzpc5tc3C7cXbgrqt
      - GITLAB_SECRETS_SECRET_KEY_BASE=S8ZRV6kN43LQ2sQVmVfTlM32jLzj8FFLf6L6WzxtjwqnXkZlzpc5tc3C7cXbgrqt
      - GITLAB_SECRETS_OTP_KEY_BASE=S8ZRV6kN43LQ2sQVmVfTlM32jLzj8FFLf6L6WzxtjwqnXkZlzpc5tc3C7cXbgrqt
      - DEBUG=false
  
      - DB_ADAPTER=postgresql
      - DB_HOST=postgresql
      - DB_PORT=5432
      - DB_USER=gitlab
      - DB_PASS=password
      - DB_NAME=gitlabhq_production
  
      - REDIS_HOST=redis
      - REDIS_PORT=6379
  
      - TZ=Asia/Kolkata
      - GITLAB_TIMEZONE=Kolkata
  
      - GITLAB_HTTPS=false
      - SSL_SELF_SIGNED=false
  
      - GITLAB_HOST=localhost
      - GITLAB_PORT=${GITLAB_PORT}
      - GITLAB_SSH_PORT=${GITLAB_SSH_PORT}
      - GITLAB_RELATIVE_URL_ROOT=
      - GITLAB_SECRETS_DB_KEY_BASE=long-and-random-alphanumeric-string
      - GITLAB_SECRETS_SECRET_KEY_BASE=long-and-random-alphanumeric-string
      - GITLAB_SECRETS_OTP_KEY_BASE=long-and-random-alphanumeric-string
  
      - GITLAB_ROOT_PASSWORD=
      - GITLAB_ROOT_EMAIL=
  
      - GITLAB_NOTIFY_ON_BROKEN_BUILDS=true
      - GITLAB_NOTIFY_PUSHER=false
  
      - GITLAB_EMAIL=notifications@example.com
      - GITLAB_EMAIL_REPLY_TO=noreply@example.com
      - GITLAB_INCOMING_EMAIL_ADDRESS=reply@example.com
  
      - GITLAB_BACKUP_SCHEDULE=daily
      - GITLAB_BACKUP_TIME=01:00
  
      - SMTP_ENABLED=false
      - SMTP_DOMAIN=www.example.com
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_USER=mailer@example.com
      - SMTP_PASS=password
      - SMTP_STARTTLS=true
      - SMTP_AUTHENTICATION=login
  
      - IMAP_ENABLED=false
      - IMAP_HOST=imap.gmail.com
      - IMAP_PORT=993
      - IMAP_USER=mailer@example.com
      - IMAP_PASS=password
      - IMAP_SSL=true
      - IMAP_STARTTLS=false
  
      - OAUTH_ENABLED=false
      - OAUTH_AUTO_SIGN_IN_WITH_PROVIDER=
      - OAUTH_ALLOW_SSO=
      - OAUTH_BLOCK_AUTO_CREATED_USERS=true
      - OAUTH_AUTO_LINK_LDAP_USER=false
      - OAUTH_AUTO_LINK_SAML_USER=false
      - OAUTH_EXTERNAL_PROVIDERS=
  
      - OAUTH_CAS3_LABEL=cas3
      - OAUTH_CAS3_SERVER=
      - OAUTH_CAS3_DISABLE_SSL_VERIFICATION=false
      - OAUTH_CAS3_LOGIN_URL=/cas/login
      - OAUTH_CAS3_VALIDATE_URL=/cas/p3/serviceValidate
      - OAUTH_CAS3_LOGOUT_URL=/cas/logout
  
      - OAUTH_GOOGLE_API_KEY=
      - OAUTH_GOOGLE_APP_SECRET=
      - OAUTH_GOOGLE_RESTRICT_DOMAIN=
  
      - OAUTH_FACEBOOK_API_KEY=
      - OAUTH_FACEBOOK_APP_SECRET=
  
      - OAUTH_TWITTER_API_KEY=
      - OAUTH_TWITTER_APP_SECRET=
  
      - OAUTH_GITHUB_API_KEY=
      - OAUTH_GITHUB_APP_SECRET=
      - OAUTH_GITHUB_URL=
      - OAUTH_GITHUB_VERIFY_SSL=
  
      - OAUTH_GITLAB_API_KEY=
      - OAUTH_GITLAB_APP_SECRET=
  
      - OAUTH_BITBUCKET_API_KEY=
      - OAUTH_BITBUCKET_APP_SECRET=
  
      - OAUTH_SAML_ASSERTION_CONSUMER_SERVICE_URL=
      - OAUTH_SAML_IDP_CERT_FINGERPRINT=
      - OAUTH_SAML_IDP_SSO_TARGET_URL=
      - OAUTH_SAML_ISSUER=
      - OAUTH_SAML_LABEL="Our SAML Provider"
      - OAUTH_SAML_NAME_IDENTIFIER_FORMAT=urn:oasis:names:tc:SAML:2.0:nameid-format:transient
      - OAUTH_SAML_GROUPS_ATTRIBUTE=
      - OAUTH_SAML_EXTERNAL_GROUPS=
      - OAUTH_SAML_ATTRIBUTE_STATEMENTS_EMAIL=
      - OAUTH_SAML_ATTRIBUTE_STATEMENTS_NAME=
      - OAUTH_SAML_ATTRIBUTE_STATEMENTS_FIRST_NAME=
      - OAUTH_SAML_ATTRIBUTE_STATEMENTS_LAST_NAME=
  
      - OAUTH_CROWD_SERVER_URL=
      - OAUTH_CROWD_APP_NAME=
      - OAUTH_CROWD_APP_PASSWORD=
  
      - OAUTH_AUTH0_CLIENT_ID=
      - OAUTH_AUTH0_CLIENT_SECRET=
      - OAUTH_AUTH0_DOMAIN=
  
      - OAUTH_AZURE_API_KEY=
      - OAUTH_AZURE_API_SECRET=
      - OAUTH_AZURE_TENANT_ID=
      
    volumes_from:
      - dita-ot
      - linkmgr
      
#
# Define the GitLab runner
# that will be used to run build jobs;
#      
  gitlab-runner:
    image: gitlab/gitlab-runner:latest
    container_name: gitlab-runner
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${HOME}/tmp/gitlab-runner/config:/etc/gitlab-runner

#
# Web server for HTML delivery
#

  web-delivery:
    extends:
       file: caddy-dfst/docker-compose.yml  
       service: caddy-dfst
    volumes:
      - ${HOME}/tmp/webdelivery:/srv/www
      
#
# Demo content data volume:
#
# Using top as the command so the container is always running
# so we can then copy files out of it (which requires a running
# container).
#
# Defines volume /opt/dita-community/data/Thunderbird
#
  demo-content:
    image: ditacommunity/demo-content
    container_name: demo-content
    command: top
      
#  
# End of compose file.
#
