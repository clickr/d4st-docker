<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="Untitled9">
    <title>DFST Container Quick Start</title>
    <shortdesc>If you are familiar with Docker you can follow these instructions to get going as
    quickly as possible. </shortdesc>
    <taskbody>
    <prereq>
      <p>These instructions reflect the use of Docker for Windows or Docker for Mac, which both
        provide tight integration of Docker with the operating system. The instructions should be
        the same for Docker on Linux.</p>
      <p>The DFST system uses git to manage your source code. You must have a git client installed
        on your machine. Under macOS this should already be the case (test it by typing "git" in a
        command window). The built-in version of git may be older than you want, in which case you
        can use homebrew to install a newer version of git (see <xref keyref="website-homebrew"
        />).</p>
      <p>For Windows you can install Git For Windows, which is a free git client. Be sure to include
        the git bash shell in your installation. </p>
      <p>For both macOS and Windows the free SourceTree application from Atlassian provides a
        complete git user interface. For Windows, the free Tortoise Git provides integration of git
        with Windows Explorer.</p>
      <p platform="windows">Under Windows, open a Docker Quickstart Terminal window (<image
          keyref="icon-docker-quickstart" height="16" id="image_xwr_mpb_bv" placement="inline"/>) or
        a Git for Windows shell (both provide a Linux-style command environment).</p>
      <note>Under Windows you will need to use the Docker settings to share your
          <filepath>C</filepath> drive, which is not shared by default. Container startup will fail
        with a message indicating that you need to do this if you forget.</note>
      <p platform="mac">Under macOS you can use a normal terminal window.</p>
      <note platform="windows">The Microsoft Edge browser's security settings may not allow you to
        connect to the Web applications running in the Docker containers. These instructions assume
        you have the Chrome browser installed and Firefox should work fine as well.</note>
      <note platform="windows">The Docker environment is Linux-based, so even under Windows you will
        be using a Linux command line to use the <cmdname>dfst</cmdname> command or use the
          <cmdname>docker</cmdname> command directly. In this environment all file paths use forward
        slashes ("/") rather than back slashes ("\"). Absolute paths start with
          <filepath>/c</filepath> rather than <filepath>c:\</filepath>. For example, if your user
        directory is <filepath>c:\Users\ekimber</filepath>, in a Docker terminal you would type
          <filepath>/c/Users/ekimber</filepath>. For macOS users there is no difference. These
        instructions reflect Windows on the assumption that macOS users are sufficiently familiar
        with the command line.</note>
    </prereq>
        <steps>
      <step>
        <cmd>Download the DITA for Small Teams <filepath>dfst-docker</filepath> Zip package from the
          dita-for-small-teams project releases area:</cmd>
        <info>
          <p>Go to <xref keyref="website-dfst-github-project-releases"/> and download the latest
            release. The Zip file will be named
                <filepath>dfst-docker-<varname>v</varname>-<varname>r</varname>-<varname>m</varname>.zip</filepath>,
            where
              <filepath><varname>v</varname>-<varname>r</varname>-<varname>m</varname></filepath> is
            the version, release, and modification number, e.g. "1-1-0" for release 1.1.0.</p>
        </info>
      </step>
      <step>
        <cmd>Unzip the DFST release package to somewhere convenient, e.g. <filepath
            platform="windows">c:\apps</filepath>.</cmd>
        <stepresult>
          <p>You should get a directory named <filepath>dfst-docker</filepath> with this
            content:<codeblock>LICENSE
README.md
bin
containers
dfst
docs
dot_env</codeblock></p>
          <p>The <filepath>dfst</filepath> script is the main script for managing the DFST
            components through Docker. It is a bash shell script intended to be run in a bash shell.
            Under Windows you can run it in a git bash shell.</p>
        </stepresult>
      </step>
      <step>
        <cmd>Start a bash shell (under Windows, a git command window, which provides a bash shell)
          and navigate to the directory for the DFST package:</cmd>
        <info>
          <codeblock>ekimber@WIN-HH0I81E3DAU MINGW64 /c
$ cd apps/dfst-docker

ekimber@WIN-HH0I81E3DAU MINGW64 /c/apps/dfst-docker
$ ls
bin/  containers/  dfst  docs/  LICENSE  README.md</codeblock>
        </info>
      </step>
      <step>
        <cmd>Run the command "<codeph>./dfst start</codeph>":</cmd>
        <info>
          <codeblock>ekimber@WIN-HH0I81E3DAU MINGW64 /c/temp/dfst-docker
$ ./dfst start
Starting DFST Docker containers in the background. Use docker-compose commands or Kitematic to view the status.
Pulling redis (sameersbn/redis:latest)...
latest: Pulling from sameersbn/redis
â€¦ lots more messages here ...
Creating gitlab-dfst

Docker containers:
CONTAINER ID        IMAGE                         COMMAND                  CREATED             STATUS                  PORTS                                                            NAMES
7971effdd6cb        dfst/gitlab-dfst              "/assets/wrapper"        3 seconds ago       Up Less than a second   0.0.0.0:80->80/tcp, 0.0.0.0:443->443/tcp, 0.0.0.0:8022->22/tcp   gitlab-dfst
9693d356371d        dfst/caddy-dfst               "/usr/bin/caddy --..."   13 seconds ago      Up 10 seconds           80/tcp, 443/tcp, 0.0.0.0:80->2015/tcp                            caddy-dfst
aab650590a70        dfst/link-manager-basex       "/opt/basex/bin/basex"   2 minutes ago       Up 2 minutes            0.0.0.0:1984->1984/tcp, 0.0.0.0:8984->8984/tcp                   linkmgr-dfst
a280cacb6079        sameersbn/postgresql:9.4-12   "/sbin/entrypoint.sh"    2 minutes ago       Up 2 minutes            5432/tcp                                                         dfstdocker_postgresql_1
f15cb9d8c17a        sameersbn/redis:latest        "/sbin/entrypoint.sh"    4 minutes ago       Up 4 minutes            6379/tcp
                                                         dfstdocker_redis_1
</codeblock>
          <p>The first time you do this Docker has to download all the images for the containers and
            this can take a while.The next time you run it, it will be quick.</p>
          <p>The exact set of containers may be different depending on the current configuration of
            the DFST container set.</p>
        </info>
        <stepresult>
          <p>The DFST containers should start. It will take a minute or two for the Web services in
            the containers to start up completely.</p>
          <p>The first time you run the <cmdname>dfst</cmdname> command it creates the file
              <filepath>dfst/.env</filepath>. This file contains environment settings used by the
            docker commands. You can edit this file to change the ports used by the different DFST
            Web services. You will also edit this file to add the GitLab private token in a later
            step.</p>
          <p>The first time you run GitLab it has to do quite a lot of setup and that may take
            several minutes to complete. You can use the command <cmdname>dfst log-gitlab</cmdname>
            to see what it's doing and monitor it's startup progress.</p>
        </stepresult>
      </step>
      <step>
        <cmd>To make things easier later, add the <filepath>dfst</filepath> directory to the PATH
          environment variable in your command window:</cmd>
        <info>
          <codeblock>$ export PATH=$PATH:$PWD</codeblock>
          <p>The <varname>$PWD</varname> environment variable expands to the current directory, so
            the <filepath>dfst</filepath> directory should now be in your PATH environment
            variable.</p>
          <p>The make this setting permanent you can modify your <filepath>.bash_profile</filepath>
            (OSX) or <filepath>.bashrc</filepath> (Windows, Linux) file in your home directory to
            add the <filepath>dfst</filepath> directory to the PATH,
            e.g.:<codeblock># ~/.bash_profile
export PATH="$PATH:/Users/ekimber/apps/dfst"</codeblock></p>
          <p>or, for Windows:<codeblock># ~/.bashrc
export PATH=$PATH:"c:/apps/dfst"</codeblock></p>
        </info>
        <stepresult>
          <p>You should be able to run the <cmdname>dfst</cmdname> command from any directory. You
            can test this by using the <cmdname>cd</cmdname> command to move to another directory
            and then execute the command <codeph>dfst help</codeph>. You should get the listing of
            available <cmdname>dfst</cmdname> commands.</p>
          <p>If the <cmdname>dfst</cmdname> command doesn't work, check the value of the
              <varname>$PATH</varname> environment variable using the <cmdname>echo</cmdname>
            command:<codeblock>$ echo $PATH
$ /usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/Users/ekimber/apps/dita-for-small-teams/dfst-docker</codeblock></p>
          <p>Check the value and make sure it's correct. If it's not correct, try setting it
            again.</p>
        </stepresult>
      </step>
      <stepsection>
        <p>To use GitLab as a remote git repository you must set up a GitLab user for yourself (or
          anyone who will be connecting to the GitLab server) and then create GitLab projects
          corresponding to your local git repositories that you want to use with the DFST system.
          This requires a one-time task of logging into GitLab as the root user so you can get the
          magic "private token" required to use the GitLab API. Once you've done this the rest of
          the user and project setup can be done with the <cmdname>dfst</cmdname>
            command.<note>There doesn't appear to be a way to install GitLab with a default root
            password that would then allow automatic fetching of the private token. See <xref
              href="https://gitlab.com/gitlab-org/gitlab-ce/issues/1980" format="html"
              scope="external"/>. If somebody knows a solution to this please say so.</note></p>
      </stepsection>
      <step>
        <cmd>In the Docker terminal, type the command "<codeph>dfst gitlab</codeph>" to open the
          GitLab Web application.</cmd>
        <stepresult>
          <p>Your browser should open to the GitLab login page:</p>
          <fig id="fig_gwz_yjc_bv">
            <title>GitLab Login Screen</title>
            <image keyref="screenshot-gitlab-login-01" width="3in" id="image_kkb_bkc_bv"
              placement="break"/>
          </fig>
          <p>If your browser doesn't open, make sure you have Google Chrome installed.</p>
        </stepresult>
      </step>
      <step>
        <cmd>The first time you connect to GitLab you will be asked to set the password for the user
          "root".</cmd>
        <info>
          <p>Choose any password you like as long as you can remember it. You should then be taken
            to the normal login screen. Log in as user "root" with the password you just set.</p>
          <p>The password will be reasonably secure as stored in the GitLab container so it should
            be safe to use your regular password.</p>
        </info>
        <stepresult>You should be logged into GitLab as user "root".</stepresult>
      </step>
      <step>
        <cmd>Select "Profile Settings" in the left-hand navigation panel and then select "Account"
          to get to the account details for user "root".</cmd>
        <stepresult>
          <p>You should see a field labeled "Private token" at the top of the page containing a
            value like "zdPgyhv6rnZfDsqHxqKZ".</p>
        </stepresult>
      </step>
      <step>
        <cmd>Copy the private token string to the clipboard.</cmd>
      </step>
      <step>
        <cmd>Edit the <filepath>docker-dfst/.env</filepath> file, remove the "#" from the
            <codeph>GITLAB_PRIVATE_TOKEN</codeph> line, and replace "YourPrivateToken" with the
          value on the clipboard:</cmd>
        <info>Before:<codeblock>GITLAB_PORT=90
WEBDELIVERY_PORT=80
LINKMGR_PORT=8984
#GITLAB_PRIVATE_TOKEN=YourPrivateToken</codeblock><p>After:<codeblock>GITLAB_PORT=90
WEBDELIVERY_PORT=80
LINKMGR_PORT=8984
GITLAB_PRIVATE_TOKEN=zdPgyhv6rnZfDsqHxqKZ</codeblock></p></info>
      </step>
      <step>
        <cmd>Verify that you have set the private token correctly by using the command <codeph>dfst
            test-gitlab</codeph>.</cmd>
        <info>
          <codeblock>$ ./dfst test-gitlab
Testing GitLab connection...
Success: Connected to GitLab remote API using private token.
$</codeblock>
        </info>
      </step>
      <step>
        <cmd>Create a GitLab user for yourself by using the command <codeph>dfst
            make-gitlab-user</codeph>:</cmd>
        <info>
          <codeblock>$ dfst make-gitlab-user
$ </codeblock>
          <p>The password is set to "password" for the new user. You can change it using the GitLab
            administration pages. This password will be needed when you connect your local git
            repository to gitlab.</p>
          <p>If you want to set the password when you create the user you can specify the username
            and password on the <cmdname>dfst</cmdname>
            <cmdname>make-gitlab-user</cmdname>
            command:<codeblock>$ dfst make-gitlab-user ekimber swordfish
$ </codeblock></p>
          <p>However, this isn't very secure. If you're concerned about the security of the GitLab
            credentials, use the GitLab Web interface to change the password.</p>
        </info>
      </step>
      <stepsection>
        <p>At this point you should be ready to create new projects in GitLab and connect them to
          your local git repositories on your machine. You can use any git repository you have but
          for demo purposes the DITA Community DITA Demo content collection (the "Thunderbird"
          document set) has been included to make it easy to get started. To use it you just need to
          copy it out of its container to your local machine.</p>
      </stepsection>
      <step>
        <cmd>In the Docker terminal execute the command <codeph>dfst getdemo</codeph>, specifying
          the directory you want to put the <filepath>Thunderbird</filepath> directory into:</cmd>
        <info>
          <codeblock>$ ./dfst getdemo ~</codeblock>
          <p>This copies the <filepath>Thunderbird</filepath> directory from the container to
              <filepath>Thunderbird</filepath> under your home directory. You can replace "~" with
            whatever target directory you want.</p>
          <p>Test the copy:</p>
          <codeblock>$ ls ~/Thunderbird
c_about_defining_payload.dita      r_image_warehouse_2.dita
c_architecture_combined.dita       r_interface_drops.dita
c_architecture_overview.dita       r_interface-bypass-group-is-in-active-mode.dita
c_attribute_parameter_syntax.dita  r_jobconf.dita
â€¦ and many more files...</codeblock>
        </info>
        <stepresult>
          <p>You now have a copy of the Thunderbird data ready to push to your GitLab server once
            you have created a corresponding GitLab project for the Thunderbird git repository.</p>
        </stepresult>
      </step>
      <step>
        <cmd>In the command window, navigate into the <filepath>Thunderbird</filepath> directory and
          execute the command <codeph>dfst make-gitlab-project</codeph>:</cmd>
        <info>
          <codeblock>$ cd ~/Thunderbird
$ dfst make-gitlab-project
Creating GitLab project "Thunderbird" for user ekimber...
Success: Project "Thunderbird" created.
$</codeblock>
        </info>
        <stepresult>
          <p>A GitLab project for the current user and with the same name as the current directory
            has been created. The command also automatically sets the new GitLab repository as the
            remote repository named "origin".</p>
          <p>Verify this by using the <codeph>git remote -v</codeph> command to see that the remote
            repository has been hooked
            up:<codeblock>$ git remote -v
origin	http://localhost:90/ekimber/Thunderbird.git (fetch)
origin	http://localhost:90/ekimber/Thunderbird.git (push)
$</codeblock></p>
          <p>You can also use the GitLab Web interface to verify that the project has been
            created.</p>
        </stepresult>
      </step>
      <step>
        <cmd>Push the contents of the Thunderbird repository to the GitLab project using the command
              <codeph><cmdname>git push</cmdname> -u origin master</codeph>:</cmd>
        <info>
          <codeblock>$ git push -u origin master
Counting objects: 132, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (130/130), done.
Writing objects: 100% (132/132), 675.62 KiB | 0 bytes/s, done.
Total 132 (delta 13), reused 0 (delta 0)
remote: Running post-receive...
remote: getRepoName(): parts=["", "var", "opt", "gitlab", "git-data", "repositories", "ekimber", "thunderbird.git"]
remote: [1] repoName=thunderbird2.git
remote: [2] repoName=thunderbird2
remote: Updating using 4b825dc642cb6eb9a060e54bf8d69288fbee4904, 956a167f798801b837702c6655d2401516f02f24, refs/heads/master
remote: Added or modified file: "Integrator_admin.ditamap"
remote:    Adding file "Integrator_admin.ditamap" to database dfst^thunderbird^master...
remote:    Resource(s) added in 530.15 ms.
â€¦ {lots more messages} â€¦ 
remote: *** Updating fulltext index for database dfst^thunderbird^master
remote: Post-receive done.
To http://localhost:90/ekimber/Thunderbird.git
 * [new branch]      master -> master
$ </codeblock>
          <p>The command will take a little while to complete because it's copying all the XML files
            to the Link Manager database.</p>
        </info>
        <stepresult>
          <p>The Thunderbird files have been pushed to the remote GitLab repository and copied to
            the DFST Link Manager database. You can use the GitLab Web application to verify that
            the files are now in GitLab.</p>
        </stepresult>
      </step>
      <step>
        <cmd>In the bash terminal enter the command "<cmdname>dfst linkmgr</cmdname>" to open the
          Link Manager Web application in a new browser window.</cmd>
        <info>The URL for the Link Manager Web application is
            <filepath>http://localhost:8984</filepath>.</info>
        <stepresult>
          <p>The Link Manager application should open. You should see an entry like
            "Thunderbird/master" in the list of repositories and branches. You can click on the
            branch to see the files in the branch.</p>
          <p>Click on the link to the master branch to access the link manager application for that
            branch.</p>
          <p>Observe that the "Root Map" column under DITA Maps shows "?" (question marks). The
            "Root Map" column indicates whether or not a give map a root map, as determined by
            whether or not the map is referenced as a submap by any other maps. The question marks
            indicate that the link management indexes have not yet been updated for the project.</p>
        </stepresult>
      </step>
      <step>
        <cmd>Click on the "Update Link Management Indexes" link near the top of the page.</cmd>
        <stepresult>
          <p>A new tab will open with the text "Updating link management indexes". After a some time
            (should not be more than a minute on a reasonably-fast machine) the message will be
            replaced with the text "Link management database updated".</p>
        </stepresult>
      </step>
      <step>
        <cmd>Close the tab with the "Link management database updated" message and return to the
          page for the Thunderbird/master branch. Refresh the page.</cmd>
        <stepresult>
          <p>The Root Map column should now show check marks for four of the maps and nothing for
            two other maps. This indicates that the link management indexes have been updated.</p>
          <p>At this point you can explore the Link Manager application.</p>
        </stepresult>
      </step>
    </steps>
    <result id="result_t1g_htq_ww">
      <p>You now have a sample DITA-based documentation source repository, the Thunderbird project,
        set up and connected to the DFST link manager. You can experiment with modifying the source
        files and committing new versions to GitLab or creating new branches and seeing how those
        updates and new branches are reflected in the DFST Link Manager.</p>
      <p>Having followed this process you should be able to quickly add your own documents' git
        repositories to the DFST GitLab server in order to take advantage of the DFST Link
        Manager.</p>
    </result>
    </taskbody>
</task>
